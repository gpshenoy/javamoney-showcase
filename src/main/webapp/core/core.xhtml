<ui:composition xmlns="http://www.w3.org/1999/xhtml"
                xmlns:h="http://java.sun.com/jsf/html"
                xmlns:ui="http://java.sun.com/jsf/facelets"
                template="/WEB-INF/template/template.xhtml"
                xmlns:c="http://java.sun.com/jsp/jstl/core" 
                xmlns:f="http://xmlns.jcp.org/jsf/core">

    <ui:define name="title">Core</ui:define>

    <ui:define name="content">

        <h:form>
            <div class="container-fluid">
                <div class="row">

                    <div class="col-md-12"  style="margin-top: 50px;margin-bottom: 30px">

                        <span>
The package javax.money contains the types representing currencies and monetary
amounts, the core exceptions as well as supporting types for rounding and the extensions API.

CurrencyUnit models the minimal properties of a currency.
<br></br>
● MonetaryAmount defines what an amount's capabilities are. It provides interoperability
0.8 (Public Review 2) 17
Java Money Specification
between different implementations on functional level. Interoperability on data level is
ensured by getNumber() and getCurrency(). As a consequence amount can be
implemented in different ways, focusing on the behavioural and data representation
requirements implied by the concrete use cases.
<br></br>
● NumberValue returns the numeric part of an amount, so it can be accessed and
externalized in different ways. Its purpose is to ensure maximal interoperability with
existing functionalities in the JDK. Therefore it also extends java.lang.Number.
<br></br>
● NumberSupplier and CurrencySupplier model functional interfaces as defined
by JDK 8.
<br></br>
● MonetaryOperator and MonetaryQuery model the extension points for monetary
logic. They allow to implement external functionalities, either adding operations returning
a MonetaryAmount (MonetaryOperator), or returning any arbitrary other value (
MonetaryQuery).
<br></br>
● the MonetaryAmount factory finally represents an abstraction for creating new
instances of amounts. Besides setting an amount currency and number value, it allows
also to change the numeric capabilities, if the underlying implementation supports doing
this. The capabilities available for a concrete factory can be queried by accessing
maximal MonetaryContext.
<br></br>
● MonetaryContext defines the numeric capabilities of an instance as an immutable
and platform independent type.
<br></br>
● MonetaryException is the base exception class for the money API, it extends
RuntimeException.
<br></br>
		 </span>
                    </div>
	
                    <div class="col-md-12">
                        <div class="col-md-4">

                            <div class="row">
                                <!--<form class="form-horizontal" role="form"> !-->
                                <fieldset>

                                    <!-- Form Name -->
                                    <legend>Currencies</legend>

                                    <div class="form-group">
                                        
                                        <table width="100%">
                                            <thead>
                                                <td>Currency Code</td>
                                                <td>Num. Code</td>
                                                <td>Fractional</td> 
                                            </thead>
                                            
                                            <c:forEach items="#{coreBean.currencyUnitList}" var="currUnit">
                                            <tr>
                                                <td>#{currUnit.currencyCode}</td>
                                                <td>#{currUnit.numericCode}</td>
                                                <td>#{currUnit.defaultFractionDigits}</td>
                                          
                                            </tr>
                                            </c:forEach>
                                        </table>
                                        
                                        </div>
                                        
                                     
                                </fieldset>
                                <!--</form>!-->
                            </div><!-- /.row -->

                        </div>
                        <div class="col-md-8">
                            <fieldset>

                                <!-- Form Name -->
                                <legend>Explaination</legend>
                                <span>
                                    Creating a simple Currnecy object in JavaMoney is very simple like the treditional use of Currency class. As you need is to call the static method of <i>MonetaryCurrencies.getCurrency</i>
                                    <pre class="prettyprint" align="left">
        
         // Prior to Java 8
        Currency jdkCurrency = Currency.getInstance("CHF"); 
        // Java 9
	CurrencyUnit cur = MonetaryCurrencies.getCurrency("CHF"); 
                                
                                    </pre>

                                </span>
                            </fieldset>

                        </div>
                    </div>
                    <hr/>
                   <br/>
                    <div class="col-md-12">
                        <div class="col-md-6">
                            <fieldset>

                                <!-- Form Name -->
                                <legend>Monetary Amount</legend>
                                <span>
                                                        
                                    <pre class="prettyprint" align="left">
        
// Using a factory implementation
TestAmount myAmount = TestAmountFactory().create(100, MonetaryCurrencies.getCurrency(currencyCode));
                                            
// Use the monetary amount impl directly
TestAmount myAmount = TestAmount.of(100, MonetaryCurrencies.getCurrency(currencyCode));


                                    </pre>
                                </span>
                            </fieldset>

                        </div>
                        <div class="col-md-6">

                            <div class="row">
                                <!--<form class="form-horizontal" role="form">!-->
                                <legend>Explaination</legend> 
                                
                                Basically new instances of monetary amounts can be created in different ways. One way  will be  by using factories, modeled by the interface javax.money.MonetaryAmountFactory&lt;T&gt;. Instances can be obtained in different ways .<br></br>
                                ● Calling getFactory() is initialized with the current amount instance’s values, allowing for easily creation of  on an instance of MonetaryAmount , returns an instance that  similar amount instances, with some or multiple properties changed. This is known as  using prototype pattern [Gof]. This is useful for MonetaryOperator  where the default operations available on MonetaryAmount  implementing the logic/result required, or calculations are done externally and a new  implementations,  are not sufficient for  amount is created with the numeric result of that calculation.<br></br> 
                                ● The MonetaryAmounts  MonetaryAmountFactory  implementation type: singleton also provides access to  instances, hereby also allowing to bind to a specific  MonetaryAmountFactory&lt;MyMoney&gt; fact = MonetaryAmounts.   getAmountFactory(MyMoney.class); fact.withCurrency(“USD”).with(10.50); … MyMoney money = fact.create(); <br></br>
                                                                
                                <!--</form>!-->
                            </div><!-- /.row -->


                        </div>

                    </div>
                    <hr/>

                </div>
            </div>
            <nav class="navbar navbar-inverse navbar-fixed-bottom" role="navigation">
                <div class="container">
                    <!--Footer Information-->
                </div>
            </nav>
        </h:form>

    </ui:define>
</ui:composition>